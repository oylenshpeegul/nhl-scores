#!/usr/bin/env perl

use v5.28;
use warnings;
use experimental qw(signatures);
use Data::Printer;
use Encode qw(encode);
use Getopt::Long::Descriptive;
use Interpolation E => 'eval';
use Mojo::JSON qw(decode_json encode_json);
use Mojo::UserAgent;
use Path::Tiny;

my ($opt, $usage) = describe_options(
  '%c %o',
  ['debug|d', "print extra stuff"],
  ['domain=s', 'the api to connect to',
   {default => 'https://statsapi.web.nhl.com'}],
  ['path=s', 'path to players file', {default => './players.json'}],
  ['help|h', "print usage message and exit", {shortcircuit => 1}],
  ['verbose|v', "print extra stuff"],
);
 
die $usage->text if $opt->help;

my $path = path($opt->path);
my $players = $path->is_file ? decode_json($path->slurp) : "";

my $ua = Mojo::UserAgent->new;

say "Getting teams..." if $opt->verbose;
my $url = Mojo::URL->new("$E{$opt->domain}/api/v1/teams");
my $json = $ua->get($url)->result->json;
my %teams = map {$_->{abbreviation} => $_->{id}} $json->{teams}->@*;

say "Getting rosters for each team..." if $opt->verbose;
my %rosters;
for my $team (keys %teams) {
    my $url = Mojo::URL->new("$E{$opt->domain}/api/v1/teams/$teams{$team}/roster");
    my $json = $ua->get($url)->result->json;
    my %roster = map {
        $_->{person}{fullName} => $_->{person}{id}
    } $json->{roster}->@*;
    $rosters{$team} = \%roster;
}

say "Getting players for each roster..." if $opt->verbose;
for my $team (keys %rosters) {
    for my $player (keys $rosters{$team}->%*) {
        # This will fail when two players have the same name.
        if (exists $players->{$player}) {
            warn "$player exists\n" if $opt->debug;
        } else {
            say "new player: ", encode('UTF-8', $player) if $opt->verbose;
            my $url = Mojo::URL->new("$E{$opt->domain}/api/v1/people/$rosters{$team}{$player}");
            my $json = $ua->get($url)->result->json;
            # Why do we have a list of players with the same id?
            # We can have name collisions, but not id collisions, right?
            for my $person ($json->{people}->@*) {
                $players->{$player} = {
                    lastName => $person->{lastName},
                    nationality => $person->{nationality},
                };
            }
        }
    }
}

say "Writing players to file '$path'..." if $opt->verbose;
$path->spew(encode_json $players);
